snippet mcl "class metaclass(type)" b
class $1($2{type}):
    def __new__(cls, name, bases, attrs):
        _class = super($1, cls).__new__(cls, name, bases, attrs)
		return _class
endsnippet

snippet spdb "pdb in pre_save" b
from django.db.models.signals import pre_save
from django.dispatch import receiver
@receiver(pre_save, sender=$1)
def pp_pre_save(sender, **kwargs):
    import pdb; pdb.set_trace()
endsnippet


global !p
def make_choices(val_string):
	choices = (x.strip() for x in val_string.split('\n'))
	choices = (re.sub(r'(\ |)=.*', '', x) for x in choices)
	vals = ('(%s, \'\')' % x.strip() for x in choices)
	return ',\n'.join((snip.mkline(x) for x in vals))
endglobal

snippet cho "make choices" b
${1:placeholder}
${2:CHOIES} = (`!p
snip.unshift(1)
snip.rv = snip.mkline('\n')
snip.shift(2)
snip.rv += make_choices(t[1])
`
)
endsnippet

snippet deco "decorator method"
def ${1:method_name}(${2:decorator_args}):
	def deco(${3:fun}):
		def wrapper(${4:*args}, ${5:**kwargs}):
			return $3($4, $5)
		return wrapper
	return deco
endsnippet
