snippet mcl "class metaclass(type)" b
class $1($2{type}):
    def __new__(cls, name, bases, attrs):
        _class = super($1, cls).__new__(cls, name, bases, attrs)
		return _class
endsnippet

snippet spdb "pdb in pre_save" b
from django.db.models.signals import pre_save
from django.dispatch import receiver
@receiver(pre_save, sender=$1)
def pp_pre_save(sender, **kwargs):
    import pdb; pdb.set_trace()
endsnippet


global !p
def make_choices(val_string):
	choices = (x.strip() for x in val_string.split('\n'))
	choices = (re.sub(r'(\ |)=.*', '', x) for x in choices)
	vals = ('(%s, \'\')' % x.strip() for x in choices)
	return ',\n'.join((snip.mkline(x) for x in vals))
endglobal

snippet cho "make choices" b
${1:placeholder}
${2:CHOIES} = (`!p
snip.unshift(1)
snip.rv = snip.mkline('\n')
snip.shift(2)
snip.rv += make_choices(t[1])
`
)
endsnippet

snippet deco "decorator method"
def ${1:method_name}(${2:decorator_args}):
	def deco(${3:fun}):
		def wrapper(${4:*args}, ${5:**kwargs}):
			return $3($4, $5)
		return wrapper
	return deco
endsnippet

snippet setup "setup script"
def get_packages():
    kwargs = {
        'exclude': ['tests.*', 'tests'],
    }
    if 'flake8' in sys.argv:
        del kwargs['exclude']
    return find_packages(**kwargs)

setup(
    name='${1:project_name}',
    version='0.0.1',
    packages=get_packages(),
    url='',
    license='',
    author='',
    author_email='',
    description='',
    setup_requires=[],
    install_requires=[],
    tests_require=[],
    include_package_data=True,
    entry_points = {
        'console_scripts': ['$1=$1.__main__:main'],
    }
)
endsnippet

snippet logexc "logging with stack"
import traceback
_, _, tb = sys.exc_info()
stack_summary = traceback.StackSummary.extract(traceback.walk_stack(tb.tb_frame), capture_locals=True)
logger.exception(''.join(stack_summary.format()), stack_info=True)
endsnippet

snippet par ":param :"
:param ${1:variable}: $2
endsnippet

snippet ph "print bytes or string in hexadecimal"
print(' '.join('%#x' % x for x in $1${2:.encode()}))
endsnippet
